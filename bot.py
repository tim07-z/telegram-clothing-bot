import logging
import json
import os
from openai import OpenAI
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN, OPENAI_API_KEY, ADMIN_USERNAME
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import re
import aiohttp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
CONFIG_FILE = "clothing_config.json"
ORDERS_FILE = "orders.json"
USER_DATA_FILE = "user_data.json"

def load_config():
    if not os.path.exists(CONFIG_FILE):
        default_config = {
            "prompt": """–¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥—ã. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂
2. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü–æ–¥–±–∏—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã
4. –î–∞–≤–∞—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
5. –°–æ–æ–±—â–∞—Ç—å –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö
6. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–µ—â–µ–π
7. –í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
8. –ü—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –±—Ä–µ–Ω–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É, –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ä–∞–∑–º–µ—Ä—ã""",
            "knowledge_base": {
                "categories": {
                    "—Ñ—É—Ç–±–æ–ª–∫–∏": {
                        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª–∫–∏ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                        "items": [
                            {
                                "brand": "Nike",
                                "name": "Nike Dri-FIT Training",
                                "price": 2500,
                                "material": "100% –ø–æ–ª–∏—ç—Å—Ç–µ—Ä —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Dri-FIT",
                                "sizes": ["S", "M", "L", "XL", "XXL"],
                                "colors": ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–µ—Ä—ã–π", "—Å–∏–Ω–∏–π"],
                                "image_url": "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400",
                                "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –æ—Ç–≤–æ–¥–∞ –≤–ª–∞–≥–∏"
                            },
                            {
                                "brand": "Adidas",
                                "name": "Adidas Originals Trefoil",
                                "price": 2200,
                                "material": "100% —Ö–ª–æ–ø–æ–∫",
                                "sizes": ["XS", "S", "M", "L", "XL"],
                                "colors": ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "–∫—Ä–∞—Å–Ω—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1503341504253-dff4815485f1?w=400",
                                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º Trefoil"
                            },
                            {
                                "brand": "Uniqlo",
                                "name": "Uniqlo U Crew Neck",
                                "price": 1900,
                                "material": "100% —Ö–ª–æ–ø–æ–∫",
                                "sizes": ["XS", "S", "M", "L", "XL", "XXL"],
                                "colors": ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "–∫—Ä–∞—Å–Ω—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?w=400",
                                "description": "–ë–∞–∑–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"
                            }
                        ]
                    },
                    "–¥–∂–∏–Ω—Å—ã": {
                        "description": "–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è",
                        "items": [
                            {
                                "brand": "Levi's",
                                "name": "Levi's 501 Original Fit",
                                "price": 4500,
                                "material": "100% —Ö–ª–æ–ø–æ–∫ –¥–µ–Ω–∏–º",
                                "sizes": ["28", "30", "32", "34", "36", "38", "40"],
                                "colors": ["—Å–∏–Ω–∏–π", "—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "—á–µ—Ä–Ω—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1542272604-787c3835535d?w=400",
                                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è"
                            },
                            {
                                "brand": "Wrangler",
                                "name": "Wrangler Retro Slim Fit",
                                "price": 3800,
                                "material": "98% —Ö–ª–æ–ø–æ–∫, 2% —ç–ª–∞—Å—Ç–∞–Ω",
                                "sizes": ["28", "30", "32", "34", "36", "38"],
                                "colors": ["—Å–∏–Ω–∏–π", "—Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π", "—Å–µ—Ä—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1541099649105-f69ad21f3246?w=400",
                                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∂–∏–Ω—Å—ã –æ–±–ª–µ–≥–∞—é—â–µ–≥–æ –∫—Ä–æ—è"
                            }
                        ]
                    },
                    "–ø–ª–∞—Ç—å—è": {
                        "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç—å—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è",
                        "items": [
                            {
                                "brand": "Zara",
                                "name": "Zara Midi Dress",
                                "price": 5500,
                                "material": "100% —Ö–ª–æ–ø–æ–∫",
                                "sizes": ["XS", "S", "M", "L", "XL"],
                                "colors": ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–∏–Ω–∏–π", "–∫—Ä–∞—Å–Ω—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1595777457583-95e059d581b8?w=400",
                                "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –ø–ª–∞—Ç—å–µ –º–∏–¥–∏ –¥–ª–∏–Ω—ã"
                            },
                            {
                                "brand": "H&M",
                                "name": "H&M Summer Dress",
                                "price": 4200,
                                "material": "95% —Ö–ª–æ–ø–æ–∫, 5% —ç–ª–∞—Å—Ç–∞–Ω",
                                "sizes": ["36", "38", "40", "42", "44", "46"],
                                "colors": ["–±–µ–ª—ã–π", "–≥–æ–ª—É–±–æ–π", "—Ä–æ–∑–æ–≤—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1572804013427-4d7ca7268217?w=400",
                                "description": "–õ–µ–≥–∫–æ–µ –ª–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ"
                            }
                        ]
                    },
                    "–∫—É—Ä—Ç–∫–∏": {
                        "description": "–°—Ç–∏–ª—å–Ω—ã–µ –∫—É—Ä—Ç–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
                        "items": [
                            {
                                "brand": "The North Face",
                                "name": "The North Face Venture 2",
                                "price": 8500,
                                "material": "100% –Ω–µ–π–ª–æ–Ω —Å –º–µ–º–±—Ä–∞–Ω–æ–π DryVent",
                                "sizes": ["S", "M", "L", "XL", "XXL"],
                                "colors": ["—á–µ—Ä–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∫—Ä–∞—Å–Ω—ã–π"],
                                "image_url": "https://images.unsplash.com/photo-1551028719-00167b16eac5?w=400",
                                "description": "–í–æ–¥–æ—Å—Ç–æ–π–∫–∞—è –∫—É—Ä—Ç–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"
                            },
                            {
                                "brand": "Columbia",
                                "name": "Columbia Powder Lite",
                                "price": 7200,
                                "material": "100% –Ω–µ–π–ª–æ–Ω —Å —É—Ç–µ–ø–ª–∏—Ç–µ–ª–µ–º",
                                "sizes": ["S", "M", "L", "XL"],
                                "colors": ["—á–µ—Ä–Ω—ã–π", "—Å–µ—Ä—ã–π", "—Å–∏–Ω–∏–π"],
                                "image_url": "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=400",
                                "description": "–¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π –ø–æ–≥–æ–¥—ã"
                            }
                        ]
                    }
                },
                "promotions": [
                    "üéÅ 2 –≤–µ—â–∏ ‚Üí —Å–∫–∏–¥–∫–∞ 10%",
                    "üéÅ 3 –≤–µ—â–∏ ‚Üí —Å–∫–∏–¥–∫–∞ 15%", 
                    "üéÅ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º ‚Üí –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 5%",
                    "üî• –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–µ–ª–∏: –¥–∂–∏–Ω—Å—ã Levi's -25%"
                ]
            },
            "temperature": 0.7,
            "sales_funnel": [
                "–ö–∞–∫–æ–π —Ç–∏–ø –æ–¥–µ–∂–¥—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (—Ñ—É—Ç–±–æ–ª–∫–∏, –¥–∂–∏–Ω—Å—ã, –ø–ª–∞—Ç—å—è, –∫—É—Ä—Ç–∫–∏)",
                "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–∫–ª–∞—Å—Å–∏–∫–∞, —Å–ø–æ—Ä—Ç, –∫—ç–∂—É–∞–ª, –≤–µ—á–µ—Ä–Ω–∏–π)",
                "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?",
                "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä? (–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ - –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)",
                "–ö–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
                "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –ø–æ–º–æ—â—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–µ—â–∞–º–∏?"
            ]
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(default_config, f, indent=2)
        return default_config
    with open(CONFIG_FILE) as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def load_orders():
    if not os.path.exists(ORDERS_FILE):
        return []
    with open(ORDERS_FILE) as f:
        return json.load(f)

def save_orders(orders):
    with open(ORDERS_FILE, 'w') as f:
        json.dump(orders, f, indent=2)

def load_user_data():
    if not os.path.exists(USER_DATA_FILE):
        return {}
    with open(USER_DATA_FILE) as f:
        return json.load(f)

def save_user_data(user_data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f, indent=2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ConsultantStates(StatesGroup):
    waiting_for_question = State()
    sales_funnel = State()

class OrderStates(StatesGroup):
    waiting_for_order_confirmation = State()
    waiting_for_order_details = State()
    waiting_for_color_choice = State()
    waiting_for_country = State()
    waiting_for_region = State()
    waiting_for_city = State()
    waiting_for_district = State()
    waiting_for_address = State()
    waiting_for_fake_payment = State()

class AdminStates(StatesGroup):
    editing_prompt = State()
    editing_knowledge = State()
    editing_temperature = State()

# –ú–µ–Ω—é
def main_menu(is_admin=False):
    buttons = [
        [KeyboardButton(text="üëï –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ–¥–µ–∂–¥–µ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def admin_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç")],
            [KeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")],
            [KeyboardButton(text="üå° –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")],
            [KeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üîô –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def order_confirmation_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
            [KeyboardButton(text="üîô –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def color_selection_menu(colors):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    """
    keyboard = []
    # –†–∞–∑–º–µ—â–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(colors), 2):
        row = [KeyboardButton(text=colors[i])]
        if i + 1 < len(colors):
            row.append(KeyboardButton(text=colors[i + 1]))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([KeyboardButton(text="üîô –í –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def fake_payment_menu():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# OpenAI –∑–∞–ø—Ä–æ—Å
async def ask_openai(prompt: str, config: dict, user_data: dict = None) -> str:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        knowledge_text = "–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–ê:\n\n"
        
        if isinstance(config.get('knowledge_base'), dict):
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            ai_knowledge = config['knowledge_base'].get('ai_assistant_knowledge', '')
            if ai_knowledge:
                knowledge_text += f"{ai_knowledge}\n\n"
            
            knowledge_text += "–ê–°–°–û–†–¢–ò–ú–ï–ù–¢ –¢–û–í–ê–†–û–í:\n\n"
            
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            for category, category_data in config['knowledge_base'].get('categories', {}).items():
                knowledge_text += f"üìÅ {category.upper()}: {category_data.get('description', '')}\n\n"
                
                for item in category_data.get('items', []):
                    knowledge_text += f"üè∑ {item.get('brand', '')} - {item.get('name', '')}\n"
                    knowledge_text += f"üí∞ –¶–µ–Ω–∞: {item.get('price', '')}‚Ç∏\n"
                    knowledge_text += f"üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {item.get('material', '')}\n"
                    knowledge_text += f"üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(item.get('sizes', []))}\n"
                    knowledge_text += f"üé® –¶–≤–µ—Ç–∞: {', '.join(item.get('colors', []))}\n"
                    knowledge_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '')}\n"
                    knowledge_text += f"üñº –§–æ—Ç–æ: {item.get('image_url', '')}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–∏–∏
            promotions = config['knowledge_base'].get('promotions', [])
            if promotions:
                knowledge_text += "üî• –ê–ö–¶–ò–ò –ò –°–ö–ò–î–ö–ò:\n"
                for promotion in promotions:
                    knowledge_text += f"‚Ä¢ {promotion}\n"
        else:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            knowledge_text += str(config.get('knowledge_base', ''))
        
        system_content = f"{config.get('prompt', '')}\n\n{knowledge_text}"
        
        messages = [{"role": "system", "content": system_content}]
        
        if user_data:
            messages.append({
                "role": "system", 
                "content": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {json.dumps(user_data, ensure_ascii=False)}"
            })
        
        messages.append({"role": "user", "content": prompt})

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=config.get('temperature', 0.7)
        )
        
        if response and response.choices and len(response.choices) > 0:
            return response.choices[0].message.content.strip()
        else:
            return "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:100]}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def extract_user_categories(user_answers: dict) -> list:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    """
    categories = []
    
    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–∫–∏ (—Ç–∏–ø –æ–¥–µ–∂–¥—ã)
    for question, answer in user_answers.items():
        if "—Ç–∏–ø –æ–¥–µ–∂–¥—ã" in question.lower() or "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç" in question.lower():
            answer_lower = answer.lower()
            
            # –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_mapping = {
                "—Ñ—É—Ç–±–æ–ª–∫–∏": ["—Ñ—É—Ç–±–æ–ª–∫–∏", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—Ç–æ–ø—ã", "–º–∞–π–∫–∏"],
                "–¥–∂–∏–Ω—Å—ã": ["–¥–∂–∏–Ω—Å—ã", "–¥–∂–∏–Ω—Å", "–±—Ä—é–∫–∏", "—à—Ç–∞–Ω—ã", "–Ω–∏–∑"],
                "–ø–ª–∞—Ç—å—è": ["–ø–ª–∞—Ç—å—è", "–ø–ª–∞—Ç—å–µ", "–ø–ª–∞—Ç—å–∏—Ü–∞"],
                "–∫—É—Ä—Ç–∫–∏": ["–∫—É—Ä—Ç–∫–∏", "–∫—É—Ä—Ç–∫–∞", "–ø–∞–ª—å—Ç–æ", "–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞"],
                "—Ä—É–±–∞—à–∫–∏": ["—Ä—É–±–∞—à–∫–∏", "—Ä—É–±–∞—à–∫–∞", "—Å–æ—Ä–æ—á–∫–∏"],
                "–æ–±—É–≤—å": ["–æ–±—É–≤—å", "—Ç—É—Ñ–ª–∏", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–±–æ—Ç–∏–Ω–∫–∏", "—Å–∞–ø–æ–≥–∏"]
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            for category, keywords in category_mapping.items():
                if any(keyword in answer_lower for keyword in keywords):
                    categories.append(category)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not categories:
                categories = list(category_mapping.keys())
            
            break
    
    return categories

def parse_ai_response_for_products(response: str, config: dict, user_answers: dict = None) -> list:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    products = []
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    user_categories = []
    if user_answers:
        user_categories = extract_user_categories(user_answers)
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
    if isinstance(config.get('knowledge_base'), dict):
        knowledge_base = config['knowledge_base']
        response_lower = response.lower()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_to_check = user_categories if user_categories else knowledge_base.get('categories', {}).keys()
        
        for category in categories_to_check:
            if category not in knowledge_base.get('categories', {}):
                continue
                
            category_data = knowledge_base['categories'][category]
            for item in category_data.get('items', []):
                brand = item.get('brand', '').lower()
                name = item.get('name', '').lower()
                
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                # –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                brand_found = brand in response_lower
                full_name_found = name in response_lower
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                name_parts = [part for part in name.split() if len(part) > 2]
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Dri-FIT", "501", "Midi")
                key_parts_found = []
                for part in name_parts:
                    if part in response_lower:
                        key_parts_found.append(part)
                
                # –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, –µ—Å–ª–∏:
                # 1. –ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥ –ò –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ò–õ–ò
                # 2. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ò–õ–ò
                # 3. –ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥ –ò —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
                if ((brand_found and full_name_found) or 
                    full_name_found or 
                    (brand_found and len(key_parts_found) >= 1)):
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                    existing_product = next((p for p in products if p['brand'] == item.get('brand', '') and p['name'] == item.get('name', '')), None)
                    if not existing_product:
                        products.append({
                            'category': category,
                            'brand': item.get('brand', ''),
                            'name': item.get('name', ''),
                            'price': item.get('price', ''),
                            'material': item.get('material', ''),
                            'sizes': item.get('sizes', []),
                            'colors': item.get('colors', []),
                            'description': item.get('description', ''),
                            'image_url': item.get('image_url', '')
                        })
    
    return products

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def send_products_separately(message: types.Message, products: list, original_response: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    """
    if not products:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        await message.answer(
            f"üéâ –í–æ—Ç —á—Ç–æ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å:\n\n{original_response}\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?",
            reply_markup=order_confirmation_menu()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "üéâ –í–æ—Ç —á—Ç–æ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å:\n\n"
        f"{original_response}\n\n"
        "üì¶ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö:",
        reply_markup=order_confirmation_menu()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for i, product in enumerate(products, 1):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_text = (
                f"üõç <b>–¢–æ–≤–∞—Ä {i}</b>\n\n"
                f"üè∑ <b>{product['brand']} - {product['name']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']}‚Ç∏\n"
                f"üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {product['material']}\n"
                f"üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(product['sizes'])}\n"
                f"üé® –¶–≤–µ—Ç–∞: {', '.join(product['colors'])}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if product['image_url']:
                try:
                    await message.answer_photo(
                        photo=product['image_url'],
                        caption=product_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(product_text, parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(product_text, parse_mode="HTML")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
            continue

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    is_admin = message.from_user.username == ADMIN_USERNAME
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–¥–µ–∂–¥–µ. –ü–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!",
        reply_markup=main_menu(is_admin)
    )

@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    is_admin = message.from_user.username == ADMIN_USERNAME
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(is_admin))

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.username == ADMIN_USERNAME:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ handlers
@dp.message(F.text == "üëï –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ–¥–µ–∂–¥–µ")
async def start_consultation(message: types.Message, state: FSMContext):
    await state.set_state(ConsultantStates.sales_funnel)
    config = load_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sales_funnel –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    if 'sales_funnel' not in config or not config['sales_funnel']:
        # –ï—Å–ª–∏ –≤–æ—Ä–æ–Ω–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
        config['sales_funnel'] = [
            "–ö–∞–∫–æ–π —Ç–∏–ø –æ–¥–µ–∂–¥—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–≤–µ—Ä—Ö, –Ω–∏–∑, –æ–±—É–≤—å, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã)",
            "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–∫–ª–∞—Å—Å–∏–∫–∞, —Å–ø–æ—Ä—Ç, –∫—ç–∂—É–∞–ª, –≤–µ—á–µ—Ä–Ω–∏–π)",
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?",
            "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä? (–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ - –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)",
            "–ö–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
            "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –ø–æ–º–æ—â—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–µ—â–∞–º–∏?"
        ]
        save_config(config)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    
    await state.update_data(current_step=0, user_answers={})
    await message.answer(
        "üîç –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É!\n\n" + 
        config['sales_funnel'][0],
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(ConsultantStates.sales_funnel)
async def sales_funnel_step(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    data = await state.get_data()
    current_step = data['current_step']
    user_answers = data['user_answers']
    config = load_config()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    question = config['sales_funnel'][current_step]
    user_answers[question] = message.text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É
    if current_step + 1 < len(config['sales_funnel']):
        await state.update_data(
            current_step=current_step + 1,
            user_answers=user_answers
        )
        await message.answer(config['sales_funnel'][current_step + 1])
    else:
        # –í–æ—Ä–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await state.update_data(user_answers=user_answers)
        await state.set_state(ConsultantStates.waiting_for_question)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = load_user_data()
        user_data[str(message.from_user.id)] = user_answers
        save_user_data(user_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å –∞–∫—Ü–∏—è–º–∏
        promotions_text = ""
        if isinstance(config['knowledge_base'], dict) and 'promotions' in config['knowledge_base']:
            promotions_text = "–ê–∫—Ü–∏–∏: " + ", ".join(config['knowledge_base']['promotions'])
        else:
            promotions_text = "–ê–∫—Ü–∏–∏: üéÅ 2 –≤–µ—â–∏ ‚Üí —Å–∫–∏–¥–∫–∞ 10%, üéÅ 3 –≤–µ—â–∏ ‚Üí —Å–∫–∏–¥–∫–∞ 15%"
        
        prompt = (
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤:\n"
            f"{json.dumps(user_answers, ensure_ascii=False)}\n\n"
            f"–£–ø–æ–º–Ω–∏ –∞–∫—Ü–∏–∏: {promotions_text}\n\n"
            f"–í–ê–ñ–ù–û: –ü—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. "
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 'Nike Dri-FIT Training', 'Levi's 501 Original Fit', 'Zara Midi Dress' –∏ —Ç.–¥."
        )
        response = await ask_openai(prompt, config, user_answers)
        
        products = parse_ai_response_for_products(response, config, user_answers)
        await send_products_separately(message, products, response)

@dp.message(ConsultantStates.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    elif message.text == "‚úÖ –î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç
        config = load_config()
        user_data = load_user_data().get(str(message.from_user.id), {})
        all_colors = set()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_categories = extract_user_categories(user_data)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if isinstance(config.get('knowledge_base'), dict):
            categories_to_check = user_categories if user_categories else config['knowledge_base'].get('categories', {}).keys()
            
            for category in categories_to_check:
                if category in config['knowledge_base'].get('categories', {}):
                    category_data = config['knowledge_base']['categories'][category]
                    for item in category_data.get('items', []):
                        colors = item.get('colors', [])
                        all_colors.update(colors)
        
        # –ï—Å–ª–∏ —Ü–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if not all_colors:
            all_colors = {"—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–∏–Ω–∏–π", "–∫—Ä–∞—Å–Ω—ã–π", "–∑–µ–ª–µ–Ω—ã–π", "–∂–µ–ª—Ç—ã–π", "—Ä–æ–∑–æ–≤—ã–π", "—Å–µ—Ä—ã–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π"}
        
        colors_list = sorted(list(all_colors))
        
        await state.set_state(OrderStates.waiting_for_color_choice)
        await state.update_data(available_colors=colors_list)
        
        await message.answer(
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=color_selection_menu(colors_list)
        )
        return
    elif message.text == "‚ùå –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ß—Ç–æ –≤–∞—Å –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        return
    
    try:
        config = load_config()
        user_data = load_user_data().get(str(message.from_user.id), {})
        
        await bot.send_chat_action(message.chat.id, "typing")
        response = await ask_openai(message.text, config, user_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not response or response.strip() == "":
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        if "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" in response.lower() or "–∑–∞–∫–∞–∑–∞—Ç—å" in response.lower():
            await message.answer(
                response,
                reply_markup=order_confirmation_menu()
            )
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç–≤–µ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            products = parse_ai_response_for_products(response, config, user_data)
            
            if products:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await send_products_separately(message, products, response)
            else:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                await message.answer(
                    response,
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
                        resize_keyboard=True
                    )
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_question: {e}")
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)[:100]}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )

@dp.message(F.text == "‚ÑπÔ∏è –û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ")
async def about_consultant(message: types.Message):
    await message.answer(
        "ü§ñ <b>–û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–¥–µ–∂–¥–µ. –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã.\n\n"
        "üìã <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã –∏ —Å—Ç–∏–ª—è\n"
        "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é —Ä–∞–∑–º–µ—Ä—ã –∏ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –î–∞—é —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–µ—â–µ–π\n"
        "‚Ä¢ –°–æ–æ–±—â–∞—é –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
        "üõç <b>–Ø —Ä–∞–±–æ—Ç–∞—é —Å:</b>\n"
        "‚Ä¢ –§—É—Ç–±–æ–ª–∫–∞–º–∏, –¥–∂–∏–Ω—Å–∞–º–∏, –ø–ª–∞—Ç—å—è–º–∏\n"
        "‚Ä¢ –ö—É—Ä—Ç–∫–∞–º–∏, —Ä—É–±–∞—à–∫–∞–º–∏, –æ–±—É–≤—å—é\n"
        "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
        "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ 'üëï –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ–¥–µ–∂–¥–µ' –≤ –º–µ–Ω—é!",
        reply_markup=main_menu(message.from_user.username == ADMIN_USERNAME)
    )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message(OrderStates.waiting_for_color_choice)
async def process_color_choice(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    available_colors = state_data.get('available_colors', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    if message.text not in available_colors:
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=color_selection_menu(available_colors)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(selected_color=message.text)
    await state.set_state(OrderStates.waiting_for_order_details)
    
    await message.answer(
        f"üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: <b>{message.text}</b>\n\n"
        "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "2. –†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ)\n"
        "3. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ Nike Dri-FIT, L, @username –∏–ª–∏ +79991234567",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(OrderStates.waiting_for_order_details)
async def process_order(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
    await state.update_data(order_details=message.text)
    await state.set_state(OrderStates.waiting_for_country)
    
    await message.answer(
        "üåç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ë–µ–ª–∞—Ä—É—Å—å",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message(OrderStates.waiting_for_country)
async def process_country(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    await state.update_data(country=message.text)
    await state.set_state(OrderStates.waiting_for_region)
    
    await message.answer(
        "üèõÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(OrderStates.waiting_for_region)
async def process_region(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    await state.update_data(region=message.text)
    await state.set_state(OrderStates.waiting_for_city)
    
    await message.answer(
        "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê–ª–º–∞—Ç—ã, –ú–∏–Ω—Å–∫",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(OrderStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.waiting_for_district)
    
    await message.answer(
        "üèòÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω, –õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –Ω—É–∂–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="üîô –í –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(OrderStates.waiting_for_district)
async def process_district(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    if message.text.lower() not in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–π–æ–Ω"]:
        await state.update_data(district=message.text)
    else:
        await state.update_data(district="–ù–µ —É–∫–∞–∑–∞–Ω")
    
    await state.set_state(OrderStates.waiting_for_address)
    
    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15, –∫–≤. 25\n"
        "–ò–ª–∏: –ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞, 123, –æ—Ñ–∏—Å 456",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    state_data = await state.get_data()
    user_data = load_user_data().get(str(message.from_user.id), {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
    country = state_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    region = state_data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
    city = state_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    district = state_data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')
    address = message.text
    
    full_address = f"{country}, {region}, {city}"
    if district and district != "–ù–µ —É–∫–∞–∑–∞–Ω":
        full_address += f", {district}"
    full_address += f", {address}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
    order_summary = (
        f"üìã <b>–ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"üé® –¶–≤–µ—Ç: <b>{state_data.get('selected_color', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
        f"üìù –¢–æ–≤–∞—Ä: {state_data.get('order_details', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üåç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"   –°—Ç—Ä–∞–Ω–∞: {country}\n"
        f"   –û–±–ª–∞—Å—Ç—å: {region}\n"
        f"   –ì–æ—Ä–æ–¥: {city}\n"
        f"   –†–∞–π–æ–Ω: {district}\n"
        f"   –ê–¥—Ä–µ—Å: {address}\n\n"
        f"üí≥ –ì–æ—Ç–æ–≤—ã –∫ –æ–ø–ª–∞—Ç–µ?"
    )
    
    await state.update_data(full_address=full_address)
    await state.set_state(OrderStates.waiting_for_fake_payment)
    
    await message.answer(
        order_summary,
        reply_markup=fake_payment_menu()
    )

@dp.message(OrderStates.waiting_for_fake_payment)
async def process_fake_payment(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu(message.from_user.username == ADMIN_USERNAME)
        )
        await state.clear()
        return
    elif message.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
        await message.answer("üí≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        state_data = await state.get_data()
        user_data = load_user_data().get(str(message.from_user.id), {})
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        orders = load_orders()
        orders.append({
            "user_id": message.from_user.id,
            "username": message.from_user.username or "–ù–µ—Ç username",
            "order_details": state_data.get('order_details', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            "selected_color": state_data.get('selected_color', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            "delivery_address": {
                "country": state_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "region": state_data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "city": state_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "district": state_data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "address": state_data.get('full_address', '–ù–µ —É–∫–∞–∑–∞–Ω')
            },
            "user_data": user_data,
            "status": "–û–ø–ª–∞—á–µ–Ω",
            "payment_method": "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞",
            "timestamp": str(message.date)
        })
        save_orders(orders)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if ADMIN_USERNAME:
            try:
                await bot.send_message(
                    chat_id=ADMIN_USERNAME,
                    text=f"üõç <b>–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç'}\n"
                         f"üé® –¶–≤–µ—Ç: {state_data.get('selected_color', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                         f"üìù –î–µ—Ç–∞–ª–∏: {state_data.get('order_details', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                         f"üåç –ê–¥—Ä–µ—Å: {state_data.get('full_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                         f"üí≥ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω\n"
                         f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(user_data, ensure_ascii=False)[:500]}...\n\n"
                         f"ID: {message.from_user.id}"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await message.answer(
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–ø–ª–∞—á–µ–Ω.\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
            f"üé® –¶–≤–µ—Ç: <b>{state_data.get('selected_color', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
            f"üìù –¢–æ–≤–∞—Ä: {state_data.get('order_details', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üåç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {state_data.get('full_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
            reply_markup=main_menu(message.from_user.username == ADMIN_USERNAME)
        )
        await state.clear()
        return
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=fake_payment_menu()
        )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ handlers
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç")
async def edit_prompt(message: types.Message, state: FSMContext):
    if message.from_user.username != ADMIN_USERNAME:
        return
    
    config = load_config()
    await state.set_state(AdminStates.editing_prompt)
    await message.answer(
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n\n{config['prompt']}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(AdminStates.editing_prompt)
async def save_prompt(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    config = load_config()
    config['prompt'] = message.text
    save_config(config)
    await message.answer("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_menu())
    await state.clear()

@dp.message(F.text == "üìö –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
async def edit_knowledge(message: types.Message, state: FSMContext):
    if message.from_user.username != ADMIN_USERNAME:
        return
    
    config = load_config()
    await state.set_state(AdminStates.editing_knowledge)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if isinstance(config['knowledge_base'], dict):
        knowledge_text = "üìö –¢–ï–ö–£–©–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_knowledge = config['knowledge_base'].get('ai_assistant_knowledge', '')
        if ai_knowledge:
            knowledge_text += f"ü§ñ –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–ê:\n{ai_knowledge[:300]}...\n\n"
        
        knowledge_text += "üì¶ –¢–û–í–ê–†–´:\n"
        for category, category_data in config['knowledge_base'].get('categories', {}).items():
            knowledge_text += f"üìÅ {category.upper()}: {category_data.get('description', '')}\n"
            knowledge_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(category_data.get('items', []))}\n\n"
            
            for i, item in enumerate(category_data.get('items', []), 1):
                knowledge_text += f"  {i}. {item.get('brand', '')} - {item.get('name', '')} ({item.get('price', '')}‚Ç∏)\n"
        
        if 'promotions' in config['knowledge_base']:
            knowledge_text += f"\nüî• –ê–ö–¶–ò–ò ({len(config['knowledge_base']['promotions'])}):\n"
            for promotion in config['knowledge_base']['promotions']:
                knowledge_text += f"‚Ä¢ {promotion}\n"
    else:
        knowledge_text = f"üìö –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n{config['knowledge_base']}"
    
    await message.answer(
        f"{knowledge_text}\n\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–∂–º–∏—Ç–µ 'üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(AdminStates.editing_knowledge)
async def save_knowledge(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    try:
        config = load_config()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if message.text.strip().startswith('{'):
            try:
                new_knowledge = json.loads(message.text)
                config['knowledge_base'] = new_knowledge
                save_config(config)
                await message.answer(
                    "‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ!", 
                    reply_markup=admin_menu()
                )
            except json.JSONDecodeError as e:
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
                        resize_keyboard=True
                    )
                )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            config['knowledge_base'] = message.text
            save_config(config)
            await message.answer(
                "‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç!", 
                reply_markup=admin_menu()
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}",
            reply_markup=admin_menu()
        )
    
    await state.clear()

@dp.message(F.text == "üå° –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
async def edit_temperature(message: types.Message, state: FSMContext):
    if message.from_user.username != ADMIN_USERNAME:
        return
    
    config = load_config()
    await state.set_state(AdminStates.editing_temperature)
    await message.answer(
        f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config['temperature']}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.0-1.0, –≥–¥–µ 0 - —Å—Ç—Ä–æ–≥–∏–π, 1 - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(AdminStates.editing_temperature)
async def save_temperature(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    try:
        temp = float(message.text)
        if 0 <= temp <= 1:
            config = load_config()
            config['temperature'] = temp
            save_config(config)
            await message.answer(f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {temp}!", reply_markup=admin_menu())
        else:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.7)")
    
    await state.clear()

@dp.message(F.text == "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        return
    
    config = load_config()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if isinstance(config['knowledge_base'], dict):
        knowledge_summary = "üìö –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:\n\n"
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_knowledge = config['knowledge_base'].get('ai_assistant_knowledge', '')
        if ai_knowledge:
            knowledge_summary += f"ü§ñ –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–ê:\n{ai_knowledge[:200]}...\n\n"
        
        # –¢–æ–≤–∞—Ä—ã
        total_items = 0
        knowledge_summary += "üì¶ –¢–û–í–ê–†–´:\n"
        for category, category_data in config['knowledge_base'].get('categories', {}).items():
            items_count = len(category_data.get('items', []))
            total_items += items_count
            knowledge_summary += f"‚Ä¢ {category}: {items_count} —Ç–æ–≤–∞—Ä–æ–≤\n"
        knowledge_summary += f"\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}"
        
        if 'promotions' in config['knowledge_base']:
            knowledge_summary += f"\n–ê–∫—Ü–∏–π: {len(config['knowledge_base']['promotions'])}"
    else:
        knowledge_summary = f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{config['knowledge_base'][:200]}..."
    
    await message.answer(
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"üìù <b>–ü—Ä–æ–º—Ç:</b>\n{config['prompt'][:200]}...\n\n"
        f"{knowledge_summary}\n\n"
        f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {config['temperature']}\n\n"
        f"üõí <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {len(load_orders())}",
        reply_markup=admin_menu()
    )

@dp.message(F.text == "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        return
    
    orders = load_orders()
    if not orders:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç", reply_markup=admin_menu())
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 5 –∑–∞–∫–∞–∑–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
    for i in range(0, len(orders), 5):
        orders_batch = orders[i:i+5]
        orders_text = "üì¶ <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
        
        for order in orders_batch:
            color_info = f"üé® –¶–≤–µ—Ç: {order.get('selected_color', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n" if 'selected_color' in order else ""
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            address_info = ""
            if 'delivery_address' in order:
                delivery = order['delivery_address']
                address_info = (
                    f"üåç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                    f"   –°—Ç—Ä–∞–Ω–∞: {delivery.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"   –û–±–ª–∞—Å—Ç—å: {delivery.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"   –ì–æ—Ä–æ–¥: {delivery.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"   –†–∞–π–æ–Ω: {delivery.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"   –ê–¥—Ä–µ—Å: {delivery.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                )
            elif 'full_address' in order:
                address_info = f"üåç –ê–¥—Ä–µ—Å: {order['full_address']}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
            payment_info = ""
            if 'payment_method' in order:
                payment_info = f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order['payment_method']}\n"
            
            orders_text += (
                f"üîπ <b>–ó–∞–∫–∞–∑ –æ—Ç {order.get('timestamp', 'N/A')}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order['username']} (ID: {order['user_id']})\n"
                f"{color_info}"
                f"üìù –î–µ—Ç–∞–ª–∏: {order['order_details']}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"{payment_info}"
                f"{address_info}"
                f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(order.get('user_data', {}), ensure_ascii=False)[:200]}...\n\n"
            )
        
        await message.answer(orders_text, reply_markup=admin_menu())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())